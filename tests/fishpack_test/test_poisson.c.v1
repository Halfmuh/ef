#include <stdio.h>
#include <stdlib.h>
#include <math.h>

extern void hwscrt_( double *, double *, int *, int *, double *, double *,
		    double *, double *, int *, int *, double *, double *,
		    double *, double *, int *, double *, int *, double * );
void rowmajor_to_colmajor( double **c, double *fortran, int nrow, int ncol );
void colmajor_to_rowmajor( double *fortran, double **c, int nrow, int ncol );		  double cube( double x );  

int main(int argc, char *argv[])
{
    double a = 0.0;
    double b = 10.0;
    int M = 30;
    int MBDCND = 1;
    //
    double c = 0.0;
    double d = 10.0;
    int N = 30;
    int NBDCND = 1;
    //
    double BDA[N+1];
    double BDB[N+1];
    double BDC[M+1];
    double BDD[M+1];
    //
    double ELMBDA = 0.0;
    int IDIMF = M+1;
    double **F_C;
    double F_fort[ (M+1) * (N+1) ];
    //
    int Wdim = 4 * ( N + 1 ) + ( 13 + (int)( log2( N + 1 ) ) ) * ( M + 1 ); 
    double W[Wdim];
    //
    double PERTRB;
    int ierror;
    double x[M+1], y[N+1], Uanalit[M+1][N+1];

    F_C = (double **) malloc( (N+1) * sizeof(double *) );
    if ( F_C == NULL ) {
	printf( "F_C allocate: rows: out of memory ");
	exit( EXIT_FAILURE );	
    }
    for( int i = 0; i < N+1; i++) {
	F_C[i] = (double *) malloc( (M+1) * sizeof(double) );
	if ( F_C[i] == NULL ) {
	    printf( "F_C allocate: cols: out of memory ");
	    exit( EXIT_FAILURE );	
	}
    }

    for ( int i = 0; i < M + 1; i++ ) {
	x[i] = a + (b-a) / M * i;
    }

    for ( int j = 0; j < N + 1; j++ ) {
	y[j] = c + (d-c) / N * j;
    }

    for ( int i = 0; i < M + 1; i++ ) {
	for ( int j = 0; j < N + 1; j++ ) {
	    Uanalit[i][j] = ( cube( x[i] ) + cube( y[j] ) ) / 6;
	}
    }

    for ( int i = 1; i < M; i++ ) {
	for ( int j = 1; j < N; j++ ) {
	    F_C[i][j] = x[i] + y[j];
	}
    }

    for ( int j = 0; j < N + 1; j++ ) {
	F_C[0][j] = ( cube(a) + cube( y[j] ) ) / 6;
	F_C[M][j] = ( cube(b) + cube( y[j] ) ) / 6;
    }
    
    for ( int i = 0; i < M + 1; i++ ) {
	F_C[i][0] = ( cube( x[i] ) + cube(c) ) / 6;
	F_C[i][N] = ( cube( x[i] ) + cube(d) ) / 6;
    }

    rowmajor_to_colmajor( F_C, F_fort, N+1, M+1 );
    hwscrt_( 
	&a, &b, &M, &MBDCND, BDA, BDB,
	&c, &d, &N, &NBDCND, BDC, BDD,
	&ELMBDA, F_fort, &IDIMF, &PERTRB, &ierror, W);
    if ( ierror != 0 ) {
	printf( "Error while solving Poisson equation (HWSCRT): ierror = %d", ierror );
    }
    colmajor_to_rowmajor( F_fort, F_C, N+1, M+1 );
    printf( "pertrb = %f \n", PERTRB );

    for ( int i = 0; i < M+1; i++ ) {
	for ( int j = 0; j < N+1; j++ ) {
	    //printf( "%f ", F_C[i][j] );
	    printf( "%f ", Uanalit[i][j] - F_C[i][j] );
	}
	printf( "\n" );
    }

    return 0;
}


void rowmajor_to_colmajor( double **c, double *fortran, int nrow, int ncol )
{
    for ( int j = 0; j < ncol; j++ ) {
	for ( int i = 0; i < nrow; i++ ) {
	    *( fortran + i + ( j * nrow ) ) = c[i][j];
	}
    }
    return;
}

void colmajor_to_rowmajor( double *fortran, double **c, int nrow, int ncol )
{
    for ( int j = 0; j < ncol; j++ ) {
	for ( int i = 0; i < nrow; i++ ) {
	    c[i][j] = *( fortran + i + ( j * nrow ) );
	}
    }
    return;
}

double cube( double x )
{    
    return x*x*x;
}


